{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Keylogger","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","keyLogArr","placeholder","focusHandler","setState","document","getElementById","style","fontSize","blurHandler","changeHandler","value","concat","bind","assertThisInitialized","react_default","a","createElement","id","onChange","onFocus","onBlur","App_InputPreviewPane","currentDisplay","App_ButtonRendersArrayWithNewLine","inputsArray","React","Component","InputPreviewPane","ButtonRendersArrayWithNewLine","_this2","inputsStringWithNewLine","clickHandler","console","log","join","onClick","App","App_Keylogger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35d6aa00.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Keylogger extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.changeHandler = this.changeHandler.bind(this);\n    this.focusHandler = this.focusHandler.bind(this);\n    this.blurHandler = this.blurHandler.bind(this);\n  }\n  \n  state = {\n    message: \"All keystrokes will be logged when typed into the field above.\",\n    keyLogArr: [],\n    placeholder: \"Type here to begin\"\n  };\n  \n  // When focusing on the textarea, placeholder text will disappear and word preview will change to larger size.\n  focusHandler = () => {\n    this.setState({placeholder: \"\"});\n    document.getElementById(\"wordChange\").style.fontSize = \"xx-large\";\n  }\n  \n  // When clicking outside of the textarea, placeholder text will be replaced if empty and preview text will resize to smaller.\n  blurHandler = () => {\n    document.getElementById(\"wordChange\").style.fontSize = \"x-large\";\n    this.setState({placeholder: \"Type here to begin\"});\n  }\n  \n  // As text is entered into the textarea, all inputs will be logged to an array and a preview of the current text will appear below.\n  changeHandler = () => {\n    if (document.getElementById('words').value === \"\") {\n      this.setState({message: \"All keystrokes will be logged when typed into the field above.\"});\n    } else {\n      this.setState({message: document.getElementById('words').value});\n      this.setState({keyLogArr: this.state.keyLogArr.concat([document.getElementById('words').value])});\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <textarea id=\"words\" placeholder={this.state.placeholder} onChange={this.changeHandler} onFocus={this.focusHandler} onBlur={this.blurHandler}></textarea>\n        <InputPreviewPane id=\"wordChange\" currentDisplay={this.state.message}/>\n        <ButtonRendersArrayWithNewLine inputsArray={this.state.keyLogArr}/>\n      </div>\n    );\n  }\n}\n\nclass InputPreviewPane extends React.Component {\n  render() {\n    return (\n        <h4 id=\"wordChange\">{this.props.currentDisplay}</h4>\n    );\n  }\n}\n\nclass ButtonRendersArrayWithNewLine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n  \n  state = {\n    inputsStringWithNewLine: \"\"\n  };\n  \n  // Upon clicking the button, will log array of inputs to console and print results to screen, one line for each input.\n  clickHandler = () => {\n    console.log(this.state.keyLogArr);\n    this.setState({inputsStringWithNewLine: this.props.inputsArray.join('\\n\\n')});\n  }\n  \n  render() {\n    return (\n      <div>\n        <button onClick={this.clickHandler}>Click here to see inputs</button>\n        <pre id=\"inputs\">{this.state.inputsStringWithNewLine}</pre>\n      </div>\n    );\n  }\n}\n\nconst App = ()=> {\n  return (\n    <div id=\"keylogger\">\n      <h1 id=\"topBanner\">React Keylogger</h1>\n      <Keylogger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}